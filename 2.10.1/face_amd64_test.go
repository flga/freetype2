// +build amd64

package freetype2

func goRegularGlyphBuf(idx GlyphIndex, deg float64) []byte {
	switch {
	case idx == 0x24 && deg == 0:
		return []byte{
			0x00, 0x00, 0x00, 0x35, 0xff, 0x8f, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x8e, 0xff, 0xe5, 0x02, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x02, 0xe5, 0xc4, 0xff, 0x3f, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x41, 0xfe, 0x27, 0xf4, 0x97, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x9b, 0xc5, 0x00, 0xa8, 0xeb, 0x04, 0x00, 0x00,
			0x00, 0x05, 0xee, 0x6f, 0x00, 0x53, 0xff, 0x47, 0x00, 0x00,
			0x00, 0x4e, 0xfd, 0x1a, 0x00, 0x09, 0xf3, 0x9f, 0x00, 0x00,
			0x00, 0xa7, 0xff, 0xfc, 0xfc, 0xfc, 0xff, 0xf0, 0x07, 0x00,
			0x0b, 0xf5, 0x75, 0x28, 0x28, 0x28, 0x61, 0xff, 0x4f, 0x00,
			0x5a, 0xf6, 0x0e, 0x00, 0x00, 0x00, 0x04, 0xe9, 0xa7, 0x00,
			0xb3, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0xf4, 0x0a,
		}
	case idx == 0x24 && deg == 90:
		return []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x4f, 0xa7, 0xf4,
			0x00, 0x00, 0x00, 0x00, 0x04, 0x47, 0x9f, 0xf0, 0xff, 0xe9, 0x90,
			0x00, 0x02, 0x3f, 0x97, 0xeb, 0xff, 0xf3, 0xff, 0x61, 0x04, 0x00,
			0x8f, 0xe5, 0xff, 0xf4, 0xa8, 0x53, 0x09, 0xfc, 0x28, 0x00, 0x00,
			0xff, 0xff, 0xc4, 0x27, 0x00, 0x00, 0x00, 0xfc, 0x28, 0x00, 0x00,
			0x35, 0x8e, 0xe5, 0xfe, 0xc5, 0x6f, 0x1a, 0xfc, 0x28, 0x00, 0x00,
			0x00, 0x00, 0x02, 0x41, 0x9b, 0xee, 0xfd, 0xff, 0x75, 0x0e, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x4e, 0xa7, 0xf5, 0xf6, 0xa6,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x5a, 0xb4,
		}
	default:
		panic("no data")
	}
}

func bungeeColorMacGlyphBuf(idx GlyphIndex) []byte {
	switch idx {
	case 0x2b:
		return []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x2d, 0x38, 0x3b, 0x1a, 0x1c, 0xb5, 0xe0, 0x13, 0x1a, 0xbb, 0xe9, 0x12, 0x1a, 0xbb, 0xe9, 0x12, 0x1a, 0xbb, 0xe9, 0x12, 0x1a, 0xbb, 0xe9, 0x13, 0x1a, 0xbb, 0xe9, 0x19, 0x1c, 0xb5, 0xe0, 0x2d, 0x2d, 0x38, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x3b, 0x91, 0xaa, 0x00, 0x00, 0xc4, 0xff, 0x00, 0x09, 0xca, 0xff, 0x0b, 0x16, 0xcf, 0xff, 0x0b, 0x15, 0xce, 0xff, 0x0b, 0x16, 0xcf, 0xff, 0x00, 0x07, 0xc9, 0xff, 0x00, 0x00, 0xc4, 0xff, 0x37, 0x3b, 0x91, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x16, 0x16, 0x18, 0x19, 0x0a, 0x11, 0xc1, 0xf2, 0x02, 0x08, 0xc9, 0xff, 0x1e, 0x2a, 0xd6, 0xff, 0x11, 0x1a, 0xd0, 0xff, 0x0d, 0x16, 0xce, 0xff, 0x13, 0x1d, 0xd1, 0xff, 0x1f, 0x2a, 0xd6, 0xff, 0x01, 0x06, 0xc8, 0xff, 0x0a, 0x11, 0xc1, 0xf2, 0x16, 0x16, 0x18, 0x19, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x3d, 0x3f, 0x63, 0x6d, 0x00, 0x00, 0xc4, 0xff, 0x13, 0x1e, 0xd1, 0xff, 0x0e, 0x18, 0xcf, 0xff, 0x00, 0x02, 0xc7, 0xff, 0x06, 0x0e, 0xc2, 0xf5, 0x00, 0x01, 0xc6, 0xff, 0x13, 0x1e, 0xd1, 0xff, 0x0f, 0x1a, 0xd0, 0xff, 0x00, 0x00, 0xc4, 0xff, 0x3d, 0x3f, 0x63, 0x6d, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x01, 0x01, 0x01, 0x27, 0x2d, 0xa8, 0xcb, 0x00, 0x01, 0xc7, 0xff, 0x1c, 0x28, 0xd5, 0xff, 0x00, 0x03, 0xc7, 0xff, 0x2e, 0x33, 0x9f, 0xbe, 0x1c, 0x1c, 0x1f, 0x20, 0x1c, 0x23, 0xb3, 0xdb, 0x01, 0x06, 0xc9, 0xff, 0x1c, 0x27, 0xd5, 0xff, 0x00, 0x01, 0xc6, 0xff, 0x27, 0x2d, 0xa9, 0xcb, 0x01, 0x01, 0x01, 0x01,
			0x2a, 0x2a, 0x33, 0x36, 0x00, 0x04, 0xc6, 0xfe, 0x09, 0x13, 0xcd, 0xff, 0x16, 0x21, 0xd2, 0xff, 0x00, 0x00, 0xc4, 0xff, 0x3d, 0x3f, 0x61, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x40, 0x7f, 0x91, 0x00, 0x00, 0xc4, 0xff, 0x18, 0x23, 0xd3, 0xff, 0x08, 0x12, 0xcd, 0xff, 0x00, 0x04, 0xc6, 0xfe, 0x2a, 0x2b, 0x33, 0x36,
			0x3d, 0x40, 0x7c, 0x8c, 0x00, 0x00, 0xc4, 0xff, 0x18, 0x24, 0xd3, 0xff, 0x06, 0x0e, 0xcc, 0xff, 0x09, 0x0e, 0xc2, 0xf5, 0x13, 0x13, 0x15, 0x15, 0x00, 0x00, 0x00, 0x00, 0x29, 0x29, 0x32, 0x34, 0x01, 0x04, 0xc5, 0xfd, 0x07, 0x11, 0xcc, 0xff, 0x18, 0x24, 0xd3, 0xff, 0x00, 0x00, 0xc4, 0xff, 0x3e, 0x41, 0x7c, 0x8c,
			0x26, 0x2c, 0xaa, 0xcd, 0x00, 0x02, 0xc7, 0xff, 0x1b, 0x26, 0xd4, 0xff, 0x00, 0x04, 0xc8, 0xff, 0x12, 0x1a, 0xbb, 0xe9, 0x3f, 0x41, 0x6a, 0x75, 0x3f, 0x41, 0x6a, 0x75, 0x3f, 0x41, 0x72, 0x7f, 0x07, 0x0f, 0xc5, 0xf7, 0x00, 0x05, 0xc8, 0xff, 0x1b, 0x27, 0xd4, 0xff, 0x00, 0x02, 0xc7, 0xff, 0x27, 0x2c, 0xaa, 0xcd,
			0x14, 0x1b, 0xbb, 0xe8, 0x00, 0x08, 0xca, 0xff, 0x1a, 0x25, 0xd4, 0xff, 0x02, 0x09, 0xc9, 0xff, 0x00, 0x09, 0xc9, 0xff, 0x00, 0x00, 0xc7, 0xff, 0x00, 0x00, 0xc6, 0xff, 0x00, 0x00, 0xc7, 0xff, 0x01, 0x0a, 0xca, 0xff, 0x02, 0x09, 0xc9, 0xff, 0x1a, 0x25, 0xd4, 0xff, 0x00, 0x08, 0xca, 0xff, 0x14, 0x1b, 0xbb, 0xe8,
			0x14, 0x1c, 0xbc, 0xea, 0x00, 0x06, 0xc9, 0xff, 0x28, 0x34, 0xda, 0xff, 0x1b, 0x25, 0xd3, 0xff, 0x1a, 0x25, 0xd4, 0xff, 0x1a, 0x25, 0xd4, 0xff, 0x1a, 0x25, 0xd4, 0xff, 0x1a, 0x25, 0xd4, 0xff, 0x1a, 0x26, 0xd4, 0xff, 0x1b, 0x25, 0xd3, 0xff, 0x28, 0x34, 0xda, 0xff, 0x00, 0x06, 0xc9, 0xff, 0x14, 0x1c, 0xbc, 0xea,
			0x14, 0x1b, 0xbb, 0xe9, 0x00, 0x08, 0xca, 0xff, 0x18, 0x23, 0xd4, 0xff, 0x00, 0x06, 0xc8, 0xff, 0x00, 0x03, 0xc7, 0xff, 0x00, 0x00, 0xc6, 0xff, 0x00, 0x00, 0xc6, 0xff, 0x00, 0x00, 0xc6, 0xff, 0x00, 0x05, 0xc8, 0xff, 0x00, 0x06, 0xc8, 0xff, 0x18, 0x23, 0xd4, 0xff, 0x00, 0x08, 0xca, 0xff, 0x14, 0x1b, 0xbb, 0xe9,
			0x14, 0x1b, 0xbb, 0xe9, 0x00, 0x08, 0xca, 0xff, 0x19, 0x24, 0xd4, 0xff, 0x00, 0x02, 0xc6, 0xff, 0x33, 0x38, 0x9c, 0xb8, 0x38, 0x39, 0x4d, 0x53, 0x38, 0x39, 0x4d, 0x53, 0x38, 0x39, 0x4d, 0x53, 0x27, 0x2d, 0xab, 0xcf, 0x00, 0x02, 0xc6, 0xff, 0x19, 0x24, 0xd4, 0xff, 0x00, 0x08, 0xca, 0xff, 0x14, 0x1b, 0xbb, 0xe9,
			0x14, 0x1b, 0xbb, 0xe9, 0x00, 0x08, 0xca, 0xff, 0x19, 0x24, 0xd4, 0xff, 0x00, 0x00, 0xc5, 0xff, 0x3f, 0x42, 0x7e, 0x8f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x3a, 0x99, 0xb4, 0x00, 0x00, 0xc5, 0xff, 0x19, 0x24, 0xd4, 0xff, 0x00, 0x08, 0xca, 0xff, 0x14, 0x1b, 0xbb, 0xe9,
			0x0e, 0x17, 0xc0, 0xf0, 0x00, 0x00, 0xc7, 0xff, 0x00, 0x08, 0xc9, 0xff, 0x00, 0x00, 0xc5, 0xff, 0x3d, 0x41, 0x87, 0x9a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x36, 0xa0, 0xbe, 0x00, 0x00, 0xc5, 0xff, 0x00, 0x08, 0xc9, 0xff, 0x00, 0x00, 0xc7, 0xff, 0x0e, 0x17, 0xc0, 0xf0,
			0x2a, 0x30, 0xa6, 0xc7, 0x14, 0x17, 0xba, 0xe9, 0x13, 0x1a, 0xbb, 0xe9, 0x14, 0x15, 0xb9, 0xe9, 0x3f, 0x40, 0x6b, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x40, 0x83, 0x96, 0x14, 0x14, 0xb9, 0xe9, 0x13, 0x1a, 0xbb, 0xe9, 0x14, 0x17, 0xba, 0xe9, 0x2a, 0x30, 0xa6, 0xc7,
		}
	default:
		panic("no data")
	}
}

func notoSansJpRegGlyphBuf(idx GlyphIndex) []byte {
	switch idx {
	case 0x22:
		return []byte{
			0x00, 0x00, 0x00, 0xa5, 0xff, 0x20, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x05, 0xef, 0xb9, 0x71, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x47, 0xd2, 0x63, 0xc2, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x98, 0x92, 0x22, 0xfd, 0x16, 0x00, 0x00,
			0x00, 0x01, 0xe7, 0x52, 0x00, 0xe1, 0x64, 0x00, 0x00,
			0x00, 0x3a, 0xfd, 0x13, 0x00, 0x9e, 0xb5, 0x00, 0x00,
			0x00, 0x8b, 0xcf, 0x07, 0x07, 0x5f, 0xf8, 0x0d, 0x00,
			0x00, 0xdc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x57, 0x00,
			0x2d, 0xff, 0x2c, 0x00, 0x00, 0x00, 0xbe, 0xa8, 0x00,
			0x7e, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x6a, 0xf2, 0x07,
			0xcf, 0x82, 0x00, 0x00, 0x00, 0x00, 0x18, 0xfd, 0x4a,
		}
	default:
		panic("no data")
	}
}
