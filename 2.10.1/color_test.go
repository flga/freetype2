package freetype2

import (
	"image/color"
	"testing"
)

func TestFace_PaletteData(t *testing.T) {
	t.Run("NameIDs", func(t *testing.T) {
		t.Skip("need a valid font")
	})
	t.Run("Flags", func(t *testing.T) {
		t.Skip("need a valid font")
	})
	t.Run("EntryNameIDs", func(t *testing.T) {
		t.Skip("need a valid font")
	})
	tests := []struct {
		name    string
		face    func() (testface, error)
		want    PaletteData
		wantErr error
	}{
		{
			name:    "nilFace",
			face:    nilFace,
			want:    PaletteData{},
			wantErr: ErrInvalidFaceHandle,
		},
		{
			name:    "goRegular",
			face:    goRegular,
			want:    PaletteData{},
			wantErr: nil,
		},
		{
			name: "bungeeColorWin",
			face: bungeeColorWin,
			want: PaletteData{
				NumPalettes:       1,
				NumPaletteEntries: 2,
			},
			wantErr: nil,
		},
		{
			name: "twemojiMozilla",
			face: twemojiMozilla,
			want: PaletteData{
				NumPalettes:       1,
				NumPaletteEntries: 900,
			},
			wantErr: nil,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			face, err := tt.face()
			if err != nil {
				t.Fatalf("unable to load face: %v", err)
			}
			defer face.Free()

			got, gotErr := face.PaletteData()
			if gotErr != tt.wantErr {
				t.Errorf("Face.PaletteData() error = %v, want %v", gotErr, tt.wantErr)
				return
			}
			if diff := diff(got, tt.want); diff != nil {
				t.Errorf("Face.PaletteData() %v", diff)
			}
		})
	}
}

func TestFace_SelectPalette(t *testing.T) {
	tests := []struct {
		name    string
		face    func() (testface, error)
		idx     int
		mutate  func([]color.RGBA)
		want    []color.RGBA
		wantErr error
	}{
		{
			name:    "nilFace",
			face:    nilFace,
			want:    nil,
			wantErr: ErrInvalidFaceHandle,
		},
		{
			name:    "goRegular",
			face:    goRegular,
			idx:     0,
			want:    nil,
			wantErr: ErrInvalidArgument,
		},
		{
			name: "bungeeColorWin, no mutation",
			face: bungeeColorWin,
			idx:  0,
			want: []color.RGBA{
				{0xc9, 0x09, 0x00, 0xff},
				{0xff, 0x95, 0x80, 0xff},
			},
			wantErr: nil,
		},
		{
			name: "bungeeColorWin, with mutation",
			face: bungeeColorWin,
			idx:  0,
			mutate: func(p []color.RGBA) {
				p[0].R--
				p[0].G--
				p[0].B--
				p[0].A--
				p[1].R -= 2
				p[1].G -= 2
				p[1].B -= 2
				p[1].A -= 2
			},
			want: []color.RGBA{
				{0xc8, 0x08, 0xff, 0xfe},
				{0xfd, 0x93, 0x7e, 0xfd},
			},
			wantErr: nil,
		},
		{
			name: "twemojiMozilla, no mutation",
			face: twemojiMozilla,
			idx:  0,
			want: toRGBA(
				0xe6e7e8ff, 0xbe1931ff, 0xdd2e44ff, 0x55aceeff, 0xffac33ff, 0x553788ff, 0x9266ccff, 0xedbb9fff, 0x662113ff,
				0xa0041eff, 0x226699ff, 0xffffffff, 0x3b88c3ff, 0xf4900cff, 0x00247dff, 0x288548ff, 0x6488bdff, 0x297f47ff,
				0x689f9eff, 0x481918ff, 0x3ab1d6ff, 0x74948fff, 0xcfdcd9ff, 0x3c4544ff, 0xd1bea7ff, 0x937a61ff, 0xaf987eff,
				0xba8f69ff, 0xbb6c3fff, 0x020202ff, 0x905f41ff, 0x8fd2e2ff, 0xeeeeeeff, 0xcf1b2bff, 0xd01c3aff, 0x0020a8ff,
				0xfedf00ff, 0xc7b37fff, 0xaf9167ff, 0x068241ff, 0x141414ff, 0xec2028ff, 0x007a36ff, 0xd32011ff, 0xff5b57ff,
				0xfcd116ff, 0x0072c6ff, 0xce1126ff, 0xcccc32ff, 0xff9900ff, 0x99ccffff, 0xe41e20ff, 0x000000ff, 0xd90012ff,
				0xf2a800ff, 0x0033a0ff, 0xce1b26ff, 0xf9d616ff, 0x292f33ff, 0x265fb5ff, 0x75aadbff, 0xfcbf49ff, 0x843511ff,
				0xc16540ff, 0xed8662ff, 0xbd1721ff, 0xd89500ff, 0x66757fff, 0xffc220ff, 0x9c3900ff, 0xed2939ff, 0x4189ddff,
				0xd21034ff, 0xffce00ff, 0x0053a5ff, 0xe00034ff, 0x0098c3ff, 0x00ae65ff, 0x2d3189ff, 0xe1e8edff, 0xfbd116ff,
				0x00267fff, 0xffc726ff, 0x006a4dff, 0xf42a41ff, 0xfee833ff, 0xee232cff, 0x009e49ff, 0xef2b2dff, 0xd62612ff,
				0x00966eff, 0x1eb53aff, 0xe8112dff, 0x008751ff, 0xce1a24ff, 0xf6e4beff, 0xbcad96ff, 0x666666ff, 0x1353b4ff,
				0xeace23ff, 0x5e520dff, 0x2e8f22ff, 0xffe000ff, 0x64b4d1ff, 0xccccccff, 0xe4cb5eff, 0x9f5a2bff, 0xf7e017ff,
				0xcf1b26ff, 0x007934ff, 0xd52b1eff, 0xa05a2dff, 0xe8a30fff, 0xe7e7e7ff, 0x00a6deff, 0xb37d0aff, 0x32b266ff,
				0xeeededff, 0x012a87ff, 0xf9d90fff, 0xdc171dff, 0x009b3aff, 0xfedf01ff, 0x002776ff, 0xcbe9d4ff, 0x88c9f9ff,
				0x00abc9ff, 0xfae042ff, 0xff4e11ff, 0xffd521ff, 0x002868ff, 0xedececff, 0x4aa657ff, 0xc8313eff, 0x003e87ff,
				0x730900ff, 0x007f00ff, 0xb34b00ff, 0x289400ff, 0xadadadff, 0x6699ffff, 0xd3d3d3ff, 0x9ed7ffff, 0x006ac8ff,
				0x5ac800ff, 0xffd801ff, 0xffd83cff, 0x782121ff, 0x892614ff, 0xfbd44dff, 0x9b5f00ff, 0x008000ff, 0x802000ff,
				0x007fffff, 0xf7d618ff, 0xce1021ff, 0x003082ff, 0x289728ff, 0x009543ff, 0xfbde4aff, 0xdc241fff, 0xd32d27ff,
				0xf77f00ff, 0x009e60ff, 0x1f429bff, 0xd42d27ff, 0xcc212dff, 0x288541ff, 0xde2910ff, 0xffde02ff, 0x22408cff,
				0xce2028ff, 0x002495ff, 0x002b7fff, 0xce1225ff, 0xf4cb58ff, 0xdca841ff, 0x89c5e4ff, 0x088930ff, 0x002a8fff,
				0xcf142bff, 0x003893ff, 0xcf2027ff, 0xf7d116ff, 0xf9e814ff, 0x0021adff, 0x1b8a42ff, 0xffc639ff, 0x5c913bff,
				0xd7141aff, 0x11457eff, 0xffcd05ff, 0xed1f24ff, 0xc1694fff, 0xffcc4dff, 0x99aab5ff, 0x77b255ff, 0x6ab2e7ff,
				0x12ad2bff, 0xc60c30ff, 0x006b3fff, 0x006000ff, 0x00693fff, 0x7d76b6ff, 0xffd420ff, 0x002d62ff, 0x996b38ff,
				0xffce46ff, 0x549334ff, 0x006233ff, 0xd20f34ff, 0xc60a1dff, 0xffc400ff, 0xea596eff, 0xf4a2b2ff, 0xed1c23ff,
				0x034ea2ff, 0xffdd00ff, 0x6dbe46ff, 0xa6d388ff, 0x8ed2e7ff, 0xccd6ddff, 0x4891d9ff, 0xbf9300ff, 0x007a3dff,
				0xc4111bff, 0x3e9a00ff, 0x4289deff, 0xeb0438ff, 0xffc827ff, 0xfcdd0aff, 0xda1219ff, 0x0f47afff, 0x003399ff,
				0xffcc00ff, 0x003580ff, 0x68bfe5ff, 0xffd101ff, 0x964b36ff, 0x00a651ff, 0xfff202ff, 0xba6747ff, 0xd7a896ff,
				0xe9cfc6ff, 0x0072c4ff, 0x015121ff, 0xdd8b59ff, 0xfecf3dff, 0xff0100ff, 0x75b2ddff, 0x0065bdff, 0x3a75c4ff,
				0x007a5eff, 0x078930ff, 0xfcdd09ff, 0xda121aff, 0xf9dd16ff, 0xda1c0bff, 0xfff100ff, 0xd00c33ff, 0xcc162bff,
				0x3c762cff, 0x0d218aff, 0x009460ff, 0x002488ff, 0xe32118ff, 0x0173ceff, 0xffd701ff, 0xa36629ff, 0x009a3bff,
				0x0d5eb0ff, 0xcdad57ff, 0x923f00ff, 0x1500ffff, 0x656263ff, 0xadb0b2ff, 0x6a4c2dff, 0x00713dff, 0x1e5aa6ff,
				0x016c00ff, 0x8b9497ff, 0xf66b01ff, 0xf8f001ff, 0xc11600ff, 0xffbc00ff, 0x4997d0ff, 0x437e24ff, 0xb1b6baff,
				0x6c301eff, 0xfab81bff, 0xf9f0aaff, 0xe2cf81ff, 0x00297bff, 0x017bddff, 0x66afebff, 0x9c8431ff, 0x029270ff,
				0x7b4800ff, 0x0156a3ff, 0x2657a7ff, 0x171796ff, 0x0193ddff, 0xd21c33ff, 0x00209fff, 0x006a16ff, 0xf1b517ff,
				0xcd2a3eff, 0x436f4dff, 0x0868a9ff, 0xc09b5aff, 0x8c8d8fff, 0xebd11bff, 0xbe1827ff, 0x4c86c7ff, 0xa5a7a9ff,
				0xdc1f26ff, 0x169b62ff, 0xff883eff, 0x0038b8ff, 0xf8dc15ff, 0x138808ff, 0xff9933ff, 0x000080ff, 0x6666b3ff,
				0x007a3cff, 0xda0001ff, 0x239f40ff, 0xe96667ff, 0x7bc58cff, 0x003897ff, 0xd72828ff, 0xce2b37ff, 0x009246ff,
				0xd52048ff, 0x231f20ff, 0x11429aff, 0xffd202ff, 0xed1b2fff, 0x006600ff, 0xbb1600ff, 0x032ea1ff, 0xe01e24ff,
				0xdb7f86ff, 0xf15a29ff, 0xffc61eff, 0x3d8e33ff, 0x024fa2ff, 0xed1c27ff, 0x003478ff, 0xf9d050ff, 0xdb1c1cff,
				0x0b50a0ff, 0x059334ff, 0x073163ff, 0x00493dff, 0x00afcaff, 0x66ccffff, 0xb28914ff, 0xffd83dff, 0xffb700ff,
				0x8d2129ff, 0x005641ff, 0xff5b00ff, 0xbf0a30ff, 0x53646dff, 0x006a44ff, 0xfdb913ff, 0xc1272dff, 0x00a1deff,
				0x9e3039ff, 0xe70013ff, 0x239e46ff, 0xa0724aff, 0xfc3d32ff, 0x007e3aff, 0xd20000ff, 0xffe600ff, 0x14b53aff,
				0xea2839ff, 0x34b232ff, 0xfecb01ff, 0xc4272fff, 0x005197ff, 0xf9cf01ff, 0x00785eff, 0xffb636ff, 0xb58fe5ff,
				0x6b26b5ff, 0x8c8a8cff, 0x207900ff, 0x103800ff, 0xde200fff, 0xffe301ff, 0x21428eff, 0xce2540ff, 0x0f6433ff,
				0xffc514ff, 0x9f1d22ff, 0x77b253ff, 0xfaaa34ff, 0xf6ddcdff, 0x955c0fff, 0xb2c0c9ff, 0x1a206dff, 0xffd500ff,
				0x00a551ff, 0x006847ff, 0x010066ff, 0xfce100ff, 0x007168ff, 0xed4135ff, 0x0035adff, 0xfae600ff, 0xe05206ff,
				0x0db02bff, 0x009a49ff, 0xa9bf4cff, 0xbbddf5ff, 0xe2f09fff, 0xae1f28ff, 0x20478bff, 0x22408bff, 0xdd2f45ff,
				0xffe150ff, 0x004a77ff, 0xdb161bff, 0x005293ff, 0xd91023ff, 0x083e9dff, 0xff9d11ff, 0x630810ff, 0x0038a8ff,
				0x004600ff, 0xdc143cff, 0x0092c8ff, 0xca0000ff, 0x009a67ff, 0xd4d5d6ff, 0x4d8fccff, 0xea0b19ff, 0x0f55ecff,
				0x007229ff, 0x829acdff, 0x4aadd6ff, 0xffde00ff, 0x007127ff, 0x8d1b3dff, 0x3366ffff, 0xff0000ff, 0xffff00ff,
				0x0c4076ff, 0xc6363cff, 0xedb92eff, 0x20603dff, 0xfad201ff, 0x006c35ff, 0x0051baff, 0x215b33ff, 0xd62828ff,
				0xfcd856ff, 0x003f87ff, 0x006aa7ff, 0xfecc00ff, 0x8fc5ffff, 0x366cc9ff, 0x00d860ff, 0x5d3100ff, 0xcf6200ff,
				0xac5f1aff, 0x005da4ff, 0xee2024ff, 0x0a4ea2ff, 0x5eb6e4ff, 0xa0cfebff, 0x8bb273ff, 0x658d5cff, 0xf5f8faff,
				0x00853fff, 0xfdef42ff, 0xe31b23ff, 0x377e3fff, 0xb40a2dff, 0xecc81dff, 0x1f601aff, 0x06209fff, 0xffcc01ff,
				0x017e93ff, 0xe60000ff, 0x032a87ff, 0xdc181eff, 0xfada10ff, 0xbd725fff, 0x63b0e2ff, 0x018830ff, 0xb6b6b6ff,
				0x3e5eb9ff, 0xffd900ff, 0xb10d0dff, 0x3d5da7ff, 0xa70000ff, 0xc0e6e9ff, 0xae7521ff, 0xc7e9ebff, 0x9fc2ffff,
				0x00a3d6ff, 0x8da8c3ff, 0xcc1530ff, 0xd9a323ff, 0x179af9ff, 0xd8ab6dff, 0xfbfae7ff, 0xfec400ff, 0x00a728ff,
				0xf0082dff, 0xff9f3eff, 0xff927fff, 0xfe9de0ff, 0xba5b1fff, 0x002664ff, 0xfecb00ff, 0x002395ff, 0x006a4eff,
				0xed1c24ff, 0x241d4fff, 0xcc0000ff, 0xfed100ff, 0x29ae66ff, 0xca3745ff, 0xfaae29ff, 0xc10000ff, 0xe30917ff,
				0x5b97b1ff, 0xfe0000ff, 0x000095ff, 0x00a3ddff, 0xfbd035ff, 0x005bbbff, 0xd90001ff, 0xfcdc02ff, 0xd90000ff,
				0x9ca69cff, 0xb22334ff, 0x3c3b6eff, 0x4b92dbff, 0xffd983ff, 0x0099b5ff, 0xfddf00ff, 0xa1a1a1ff, 0xcb9c2bff,
				0xb4b4b5ff, 0xec1c24ff, 0x006129ff, 0xffc6b5ff, 0x9c5100ff, 0xf8c600ff, 0x379543ff, 0x0081c7ff, 0xf4c63dff,
				0xa70033ff, 0x172668ff, 0xda251dff, 0xfdce12ff, 0x244aa5ff, 0xd0a650ff, 0xedededff, 0xd42e11ff, 0xde3830ff,
				0xffb611ff, 0x007a4dff, 0x1a8a00ff, 0xef7d00ff, 0xffd200ff, 0x319209ff, 0xfe5011ff, 0x744eaaff, 0x3f484cff,
				0xffe8b6ff, 0x3e721dff, 0x485359ff, 0x8767acff, 0xeb2027ff, 0xf19020ff, 0xffcb4cff, 0x5c903fff, 0x226798ff,
				0x4b545dff, 0xe95f28ff, 0xaab8c2ff, 0xaa8dd8ff, 0xcbb7eaff, 0x5b6876ff, 0x5dadecff, 0x8899a6ff, 0x788895ff,
				0xd99e82ff, 0xf7bba6ff, 0xbdbdbdff, 0x808285ff, 0xa6a6a6ff, 0xd8d8d8ff, 0xa95233ff, 0xda2f47ff, 0xf4abbaff,
				0x732700ff, 0xf7b82dff, 0xa06253ff, 0xff886cff, 0xe29386ff, 0xe6e9eaff, 0x939598ff, 0xf1f2f2ff, 0xaa695bff,
				0xcc927aff, 0xb90053ff, 0x8e0042ff, 0xffd671ff, 0xfcb1e3ff, 0xff839bff, 0xd372b8ff, 0xf9d2dcff, 0xf98097ff,
				0x8a4b38ff, 0xb2c2ccff, 0xb26304ff, 0xb27962ff, 0xcc6f00ff, 0xfa743eff, 0xe4ebefff, 0x264612ff, 0x99aab599,
				0xfdd888ff, 0xfcab40ff, 0xfff8e8ff, 0xfaaa35ff, 0x3f7123ff, 0x642116ff, 0xf7deceff, 0xb7755eff, 0xd1d3d4ff,
				0xf3d2a2ff, 0xd5ab88ff, 0xaf7e57ff, 0x60352aff, 0x915a34ff, 0x7c533eff, 0x3d2e24ff, 0xffdc5dff, 0xbb1a34ff,
				0xe8eaebff, 0xf26522ff, 0xd14a15ff, 0xffb699ff, 0x27aae1ff, 0x005792ff, 0x26aae1ff, 0x31373dff, 0x394146ff,
				0x67757fff, 0x3b94d9ff, 0x1c6399ff, 0xc6e5b3ff, 0x14171aff, 0x50a5e6ff, 0xfdcb58ff, 0x9aaab4ff, 0xf18f26ff,
				0xbdddf4ff, 0xd4ab88ff, 0x357baaff, 0x4289c1ff, 0xffe51eff, 0x963b22ff, 0x0b0200ff, 0x623120ff, 0xf2d1a1ff,
				0xae7e57ff, 0x7c543eff, 0xe0aa94ff, 0xd89882ff, 0xd2a077ff, 0xc68f6aff, 0xb78b60ff, 0xaa8052ff, 0x90603eff,
				0x845636ff, 0x583529ff, 0x543226ff, 0xef9645ff, 0x657786ff, 0x3a6693ff, 0xeec2adff, 0x2a6797ff, 0xe2c196ff,
				0xcc9b7aff, 0x9b6a49ff, 0x664131ff, 0x414042ff, 0x58595bff, 0xf1f1f1ff, 0xa8b6c0ff, 0x78b159ff, 0xbd2032ff,
				0xcdd7dfff, 0xbcbec0ff, 0xccd6dcff, 0xe9eff3ff, 0x7450a0ff, 0xdac8b1ff, 0xf1dcc1ff, 0xffd4deff, 0x6d6e71ff,
				0xa7a9acff, 0xf2f9ffff, 0x880082ff, 0x3558a0ff, 0x138f3eff, 0xfad220ff, 0xff5000ff, 0xff000eff, 0xce1124ff,
				0x272b2bff, 0xe6aaaaff, 0xffcc4eff, 0xe75a70ff, 0xfee7b8ff, 0xffdd99ff, 0xbf6952ff, 0xd79e84ff, 0xf4c7b5ff,
				0x4292e0ff, 0x1f2326ff, 0x77bcf7ff, 0x380f09ff, 0xad743dff, 0xdfa994ff, 0xd19f77ff, 0xb68a60ff, 0x8f613eff,
				0xffdb5eff, 0xee9547ff, 0x981cebff, 0x4ca0d3ff, 0xc36446ff, 0x803f29ff, 0xdf1f32ff, 0x8cc6ebff, 0x1d6398ff,
				0x4191ceff, 0xecc0acff, 0x662213ff, 0x424143ff, 0x59595cff, 0x3a87c2ff, 0xf4f7f9ff, 0xffffff66, 0xa8bcccff,
				0xce9e5dff, 0xfff35fff, 0x323a3fff, 0xe0bf94ff, 0xcb9a7aff, 0x9a6a4aff, 0x915b34ff, 0x674232ff, 0x3e2e24ff,
				0xf9ca55ff, 0xf8c954ff, 0x3b93d9ff, 0x1b6399ff, 0x9268caff, 0x7450a8ff, 0xa88dc1ff, 0x7355a2ff, 0x522e8dff,
				0xde2032ff, 0xaa8ed6ff, 0x193d59ff, 0x1e4b6eff, 0x662214ff, 0xf2760fff, 0xfff75fff, 0x8ccaf7ff, 0x553986ff,
				0xe39c2fff, 0xf2abbaff, 0xa7d28bff, 0xc6e4b5ff, 0xcbb8e9ff, 0xaebbc1ff, 0x9a4e1cff, 0xe0e7ecff, 0xf3aab9ff,
				0xe39f3dff, 0x9d0522ff, 0x854836ff, 0x47ded4ff, 0xffff87ff, 0x7d8b93ff, 0xc16a4fff, 0x98a9b4ff, 0x546170ff,
				0xcdd6ddff, 0x157569ff, 0x3fc9b9ff, 0x664500ff, 0xff7892ff, 0x65471bff, 0xe8596eff, 0xfdd54cff, 0xf5bf44ff,
				0x9b3c07ff, 0xec9dadff, 0xac5640ff, 0x5d9040ff, 0xa6d488ff, 0x452e04ff, 0xb55005ff, 0x825d0eff, 0x64aaddff,
				0x4f140bff, 0x894935ff, 0x49251bff, 0x77472bff, 0x77af57ff, 0x5d8f3fff, 0xd93047ff, 0xc02334ff, 0xdfe7ecff,
				0xffd03fff, 0xffad1fff, 0xe27e00ff, 0xffb900ff, 0xf4bd61ff, 0xe9ab61ff, 0xe4973eff, 0x8c989fff, 0xbe2032ff,
				0x9e5200ff, 0x627077ff, 0xff8a3bff, 0x7c4119ff, 0xe2ea55ff, 0xbeca28ff, 0xdb7803ff, 0x7c3225ff, 0xd67503ff,
				0xedb980ff, 0xe5a157ff, 0xedb97fff, 0x929497ff, 0xe18524ff, 0xe5922eff, 0xd17a28ff, 0xffd882ff, 0x8b5e3cff,
				0x603913ff, 0xa97c50ff, 0xad5810ff, 0x679e44ff, 0xea564bff, 0xf97253ff, 0x994500ff, 0xe2a62dff, 0xc1cdd5ff,
				0x60379aff, 0x758795ff, 0x53626cff, 0xee7c0eff, 0xc43512ff, 0x546066ff, 0x754c29ff, 0xab7e59ff, 0x89021fff,
				0xf2c994ff, 0xa47de2ff, 0xffffffb3, 0xb0f0ffff, 0xabdfffff, 0x2cb4cdff, 0xdd415dff, 0x316116ff, 0x66a644ff,
				0x184f87ff, 0x2b7bb9ff, 0xfa3c32ff, 0xdc282cff, 0xb3282cff, 0xffe933ff, 0x68e090ff, 0x17bf63ff, 0x934035ff,
				0x8a4633ff, 0xffccd6ff, 0x1213bdff, 0xd67909ff, 0xa04e3cff, 0xb3bec4ff, 0xc6d5dbff, 0xedf1f4ff, 0x8899a7ff,
			),
			wantErr: nil,
		},
		{
			name: "twemojiMozilla, with mutation",
			face: twemojiMozilla,
			idx:  0,
			mutate: func(p []color.RGBA) {
				p[0].R--
				p[0].G--
				p[0].B--
				p[0].A--
				p[1].R -= 2
				p[1].G -= 2
				p[1].B -= 2
				p[1].A -= 2
			},
			want: toRGBA(
				0xe5e6e7fe, 0xbc172ffd, 0xdd2e44ff, 0x55aceeff, 0xffac33ff, 0x553788ff, 0x9266ccff, 0xedbb9fff, 0x662113ff,
				0xa0041eff, 0x226699ff, 0xffffffff, 0x3b88c3ff, 0xf4900cff, 0x00247dff, 0x288548ff, 0x6488bdff, 0x297f47ff,
				0x689f9eff, 0x481918ff, 0x3ab1d6ff, 0x74948fff, 0xcfdcd9ff, 0x3c4544ff, 0xd1bea7ff, 0x937a61ff, 0xaf987eff,
				0xba8f69ff, 0xbb6c3fff, 0x020202ff, 0x905f41ff, 0x8fd2e2ff, 0xeeeeeeff, 0xcf1b2bff, 0xd01c3aff, 0x0020a8ff,
				0xfedf00ff, 0xc7b37fff, 0xaf9167ff, 0x068241ff, 0x141414ff, 0xec2028ff, 0x007a36ff, 0xd32011ff, 0xff5b57ff,
				0xfcd116ff, 0x0072c6ff, 0xce1126ff, 0xcccc32ff, 0xff9900ff, 0x99ccffff, 0xe41e20ff, 0x000000ff, 0xd90012ff,
				0xf2a800ff, 0x0033a0ff, 0xce1b26ff, 0xf9d616ff, 0x292f33ff, 0x265fb5ff, 0x75aadbff, 0xfcbf49ff, 0x843511ff,
				0xc16540ff, 0xed8662ff, 0xbd1721ff, 0xd89500ff, 0x66757fff, 0xffc220ff, 0x9c3900ff, 0xed2939ff, 0x4189ddff,
				0xd21034ff, 0xffce00ff, 0x0053a5ff, 0xe00034ff, 0x0098c3ff, 0x00ae65ff, 0x2d3189ff, 0xe1e8edff, 0xfbd116ff,
				0x00267fff, 0xffc726ff, 0x006a4dff, 0xf42a41ff, 0xfee833ff, 0xee232cff, 0x009e49ff, 0xef2b2dff, 0xd62612ff,
				0x00966eff, 0x1eb53aff, 0xe8112dff, 0x008751ff, 0xce1a24ff, 0xf6e4beff, 0xbcad96ff, 0x666666ff, 0x1353b4ff,
				0xeace23ff, 0x5e520dff, 0x2e8f22ff, 0xffe000ff, 0x64b4d1ff, 0xccccccff, 0xe4cb5eff, 0x9f5a2bff, 0xf7e017ff,
				0xcf1b26ff, 0x007934ff, 0xd52b1eff, 0xa05a2dff, 0xe8a30fff, 0xe7e7e7ff, 0x00a6deff, 0xb37d0aff, 0x32b266ff,
				0xeeededff, 0x012a87ff, 0xf9d90fff, 0xdc171dff, 0x009b3aff, 0xfedf01ff, 0x002776ff, 0xcbe9d4ff, 0x88c9f9ff,
				0x00abc9ff, 0xfae042ff, 0xff4e11ff, 0xffd521ff, 0x002868ff, 0xedececff, 0x4aa657ff, 0xc8313eff, 0x003e87ff,
				0x730900ff, 0x007f00ff, 0xb34b00ff, 0x289400ff, 0xadadadff, 0x6699ffff, 0xd3d3d3ff, 0x9ed7ffff, 0x006ac8ff,
				0x5ac800ff, 0xffd801ff, 0xffd83cff, 0x782121ff, 0x892614ff, 0xfbd44dff, 0x9b5f00ff, 0x008000ff, 0x802000ff,
				0x007fffff, 0xf7d618ff, 0xce1021ff, 0x003082ff, 0x289728ff, 0x009543ff, 0xfbde4aff, 0xdc241fff, 0xd32d27ff,
				0xf77f00ff, 0x009e60ff, 0x1f429bff, 0xd42d27ff, 0xcc212dff, 0x288541ff, 0xde2910ff, 0xffde02ff, 0x22408cff,
				0xce2028ff, 0x002495ff, 0x002b7fff, 0xce1225ff, 0xf4cb58ff, 0xdca841ff, 0x89c5e4ff, 0x088930ff, 0x002a8fff,
				0xcf142bff, 0x003893ff, 0xcf2027ff, 0xf7d116ff, 0xf9e814ff, 0x0021adff, 0x1b8a42ff, 0xffc639ff, 0x5c913bff,
				0xd7141aff, 0x11457eff, 0xffcd05ff, 0xed1f24ff, 0xc1694fff, 0xffcc4dff, 0x99aab5ff, 0x77b255ff, 0x6ab2e7ff,
				0x12ad2bff, 0xc60c30ff, 0x006b3fff, 0x006000ff, 0x00693fff, 0x7d76b6ff, 0xffd420ff, 0x002d62ff, 0x996b38ff,
				0xffce46ff, 0x549334ff, 0x006233ff, 0xd20f34ff, 0xc60a1dff, 0xffc400ff, 0xea596eff, 0xf4a2b2ff, 0xed1c23ff,
				0x034ea2ff, 0xffdd00ff, 0x6dbe46ff, 0xa6d388ff, 0x8ed2e7ff, 0xccd6ddff, 0x4891d9ff, 0xbf9300ff, 0x007a3dff,
				0xc4111bff, 0x3e9a00ff, 0x4289deff, 0xeb0438ff, 0xffc827ff, 0xfcdd0aff, 0xda1219ff, 0x0f47afff, 0x003399ff,
				0xffcc00ff, 0x003580ff, 0x68bfe5ff, 0xffd101ff, 0x964b36ff, 0x00a651ff, 0xfff202ff, 0xba6747ff, 0xd7a896ff,
				0xe9cfc6ff, 0x0072c4ff, 0x015121ff, 0xdd8b59ff, 0xfecf3dff, 0xff0100ff, 0x75b2ddff, 0x0065bdff, 0x3a75c4ff,
				0x007a5eff, 0x078930ff, 0xfcdd09ff, 0xda121aff, 0xf9dd16ff, 0xda1c0bff, 0xfff100ff, 0xd00c33ff, 0xcc162bff,
				0x3c762cff, 0x0d218aff, 0x009460ff, 0x002488ff, 0xe32118ff, 0x0173ceff, 0xffd701ff, 0xa36629ff, 0x009a3bff,
				0x0d5eb0ff, 0xcdad57ff, 0x923f00ff, 0x1500ffff, 0x656263ff, 0xadb0b2ff, 0x6a4c2dff, 0x00713dff, 0x1e5aa6ff,
				0x016c00ff, 0x8b9497ff, 0xf66b01ff, 0xf8f001ff, 0xc11600ff, 0xffbc00ff, 0x4997d0ff, 0x437e24ff, 0xb1b6baff,
				0x6c301eff, 0xfab81bff, 0xf9f0aaff, 0xe2cf81ff, 0x00297bff, 0x017bddff, 0x66afebff, 0x9c8431ff, 0x029270ff,
				0x7b4800ff, 0x0156a3ff, 0x2657a7ff, 0x171796ff, 0x0193ddff, 0xd21c33ff, 0x00209fff, 0x006a16ff, 0xf1b517ff,
				0xcd2a3eff, 0x436f4dff, 0x0868a9ff, 0xc09b5aff, 0x8c8d8fff, 0xebd11bff, 0xbe1827ff, 0x4c86c7ff, 0xa5a7a9ff,
				0xdc1f26ff, 0x169b62ff, 0xff883eff, 0x0038b8ff, 0xf8dc15ff, 0x138808ff, 0xff9933ff, 0x000080ff, 0x6666b3ff,
				0x007a3cff, 0xda0001ff, 0x239f40ff, 0xe96667ff, 0x7bc58cff, 0x003897ff, 0xd72828ff, 0xce2b37ff, 0x009246ff,
				0xd52048ff, 0x231f20ff, 0x11429aff, 0xffd202ff, 0xed1b2fff, 0x006600ff, 0xbb1600ff, 0x032ea1ff, 0xe01e24ff,
				0xdb7f86ff, 0xf15a29ff, 0xffc61eff, 0x3d8e33ff, 0x024fa2ff, 0xed1c27ff, 0x003478ff, 0xf9d050ff, 0xdb1c1cff,
				0x0b50a0ff, 0x059334ff, 0x073163ff, 0x00493dff, 0x00afcaff, 0x66ccffff, 0xb28914ff, 0xffd83dff, 0xffb700ff,
				0x8d2129ff, 0x005641ff, 0xff5b00ff, 0xbf0a30ff, 0x53646dff, 0x006a44ff, 0xfdb913ff, 0xc1272dff, 0x00a1deff,
				0x9e3039ff, 0xe70013ff, 0x239e46ff, 0xa0724aff, 0xfc3d32ff, 0x007e3aff, 0xd20000ff, 0xffe600ff, 0x14b53aff,
				0xea2839ff, 0x34b232ff, 0xfecb01ff, 0xc4272fff, 0x005197ff, 0xf9cf01ff, 0x00785eff, 0xffb636ff, 0xb58fe5ff,
				0x6b26b5ff, 0x8c8a8cff, 0x207900ff, 0x103800ff, 0xde200fff, 0xffe301ff, 0x21428eff, 0xce2540ff, 0x0f6433ff,
				0xffc514ff, 0x9f1d22ff, 0x77b253ff, 0xfaaa34ff, 0xf6ddcdff, 0x955c0fff, 0xb2c0c9ff, 0x1a206dff, 0xffd500ff,
				0x00a551ff, 0x006847ff, 0x010066ff, 0xfce100ff, 0x007168ff, 0xed4135ff, 0x0035adff, 0xfae600ff, 0xe05206ff,
				0x0db02bff, 0x009a49ff, 0xa9bf4cff, 0xbbddf5ff, 0xe2f09fff, 0xae1f28ff, 0x20478bff, 0x22408bff, 0xdd2f45ff,
				0xffe150ff, 0x004a77ff, 0xdb161bff, 0x005293ff, 0xd91023ff, 0x083e9dff, 0xff9d11ff, 0x630810ff, 0x0038a8ff,
				0x004600ff, 0xdc143cff, 0x0092c8ff, 0xca0000ff, 0x009a67ff, 0xd4d5d6ff, 0x4d8fccff, 0xea0b19ff, 0x0f55ecff,
				0x007229ff, 0x829acdff, 0x4aadd6ff, 0xffde00ff, 0x007127ff, 0x8d1b3dff, 0x3366ffff, 0xff0000ff, 0xffff00ff,
				0x0c4076ff, 0xc6363cff, 0xedb92eff, 0x20603dff, 0xfad201ff, 0x006c35ff, 0x0051baff, 0x215b33ff, 0xd62828ff,
				0xfcd856ff, 0x003f87ff, 0x006aa7ff, 0xfecc00ff, 0x8fc5ffff, 0x366cc9ff, 0x00d860ff, 0x5d3100ff, 0xcf6200ff,
				0xac5f1aff, 0x005da4ff, 0xee2024ff, 0x0a4ea2ff, 0x5eb6e4ff, 0xa0cfebff, 0x8bb273ff, 0x658d5cff, 0xf5f8faff,
				0x00853fff, 0xfdef42ff, 0xe31b23ff, 0x377e3fff, 0xb40a2dff, 0xecc81dff, 0x1f601aff, 0x06209fff, 0xffcc01ff,
				0x017e93ff, 0xe60000ff, 0x032a87ff, 0xdc181eff, 0xfada10ff, 0xbd725fff, 0x63b0e2ff, 0x018830ff, 0xb6b6b6ff,
				0x3e5eb9ff, 0xffd900ff, 0xb10d0dff, 0x3d5da7ff, 0xa70000ff, 0xc0e6e9ff, 0xae7521ff, 0xc7e9ebff, 0x9fc2ffff,
				0x00a3d6ff, 0x8da8c3ff, 0xcc1530ff, 0xd9a323ff, 0x179af9ff, 0xd8ab6dff, 0xfbfae7ff, 0xfec400ff, 0x00a728ff,
				0xf0082dff, 0xff9f3eff, 0xff927fff, 0xfe9de0ff, 0xba5b1fff, 0x002664ff, 0xfecb00ff, 0x002395ff, 0x006a4eff,
				0xed1c24ff, 0x241d4fff, 0xcc0000ff, 0xfed100ff, 0x29ae66ff, 0xca3745ff, 0xfaae29ff, 0xc10000ff, 0xe30917ff,
				0x5b97b1ff, 0xfe0000ff, 0x000095ff, 0x00a3ddff, 0xfbd035ff, 0x005bbbff, 0xd90001ff, 0xfcdc02ff, 0xd90000ff,
				0x9ca69cff, 0xb22334ff, 0x3c3b6eff, 0x4b92dbff, 0xffd983ff, 0x0099b5ff, 0xfddf00ff, 0xa1a1a1ff, 0xcb9c2bff,
				0xb4b4b5ff, 0xec1c24ff, 0x006129ff, 0xffc6b5ff, 0x9c5100ff, 0xf8c600ff, 0x379543ff, 0x0081c7ff, 0xf4c63dff,
				0xa70033ff, 0x172668ff, 0xda251dff, 0xfdce12ff, 0x244aa5ff, 0xd0a650ff, 0xedededff, 0xd42e11ff, 0xde3830ff,
				0xffb611ff, 0x007a4dff, 0x1a8a00ff, 0xef7d00ff, 0xffd200ff, 0x319209ff, 0xfe5011ff, 0x744eaaff, 0x3f484cff,
				0xffe8b6ff, 0x3e721dff, 0x485359ff, 0x8767acff, 0xeb2027ff, 0xf19020ff, 0xffcb4cff, 0x5c903fff, 0x226798ff,
				0x4b545dff, 0xe95f28ff, 0xaab8c2ff, 0xaa8dd8ff, 0xcbb7eaff, 0x5b6876ff, 0x5dadecff, 0x8899a6ff, 0x788895ff,
				0xd99e82ff, 0xf7bba6ff, 0xbdbdbdff, 0x808285ff, 0xa6a6a6ff, 0xd8d8d8ff, 0xa95233ff, 0xda2f47ff, 0xf4abbaff,
				0x732700ff, 0xf7b82dff, 0xa06253ff, 0xff886cff, 0xe29386ff, 0xe6e9eaff, 0x939598ff, 0xf1f2f2ff, 0xaa695bff,
				0xcc927aff, 0xb90053ff, 0x8e0042ff, 0xffd671ff, 0xfcb1e3ff, 0xff839bff, 0xd372b8ff, 0xf9d2dcff, 0xf98097ff,
				0x8a4b38ff, 0xb2c2ccff, 0xb26304ff, 0xb27962ff, 0xcc6f00ff, 0xfa743eff, 0xe4ebefff, 0x264612ff, 0x99aab599,
				0xfdd888ff, 0xfcab40ff, 0xfff8e8ff, 0xfaaa35ff, 0x3f7123ff, 0x642116ff, 0xf7deceff, 0xb7755eff, 0xd1d3d4ff,
				0xf3d2a2ff, 0xd5ab88ff, 0xaf7e57ff, 0x60352aff, 0x915a34ff, 0x7c533eff, 0x3d2e24ff, 0xffdc5dff, 0xbb1a34ff,
				0xe8eaebff, 0xf26522ff, 0xd14a15ff, 0xffb699ff, 0x27aae1ff, 0x005792ff, 0x26aae1ff, 0x31373dff, 0x394146ff,
				0x67757fff, 0x3b94d9ff, 0x1c6399ff, 0xc6e5b3ff, 0x14171aff, 0x50a5e6ff, 0xfdcb58ff, 0x9aaab4ff, 0xf18f26ff,
				0xbdddf4ff, 0xd4ab88ff, 0x357baaff, 0x4289c1ff, 0xffe51eff, 0x963b22ff, 0x0b0200ff, 0x623120ff, 0xf2d1a1ff,
				0xae7e57ff, 0x7c543eff, 0xe0aa94ff, 0xd89882ff, 0xd2a077ff, 0xc68f6aff, 0xb78b60ff, 0xaa8052ff, 0x90603eff,
				0x845636ff, 0x583529ff, 0x543226ff, 0xef9645ff, 0x657786ff, 0x3a6693ff, 0xeec2adff, 0x2a6797ff, 0xe2c196ff,
				0xcc9b7aff, 0x9b6a49ff, 0x664131ff, 0x414042ff, 0x58595bff, 0xf1f1f1ff, 0xa8b6c0ff, 0x78b159ff, 0xbd2032ff,
				0xcdd7dfff, 0xbcbec0ff, 0xccd6dcff, 0xe9eff3ff, 0x7450a0ff, 0xdac8b1ff, 0xf1dcc1ff, 0xffd4deff, 0x6d6e71ff,
				0xa7a9acff, 0xf2f9ffff, 0x880082ff, 0x3558a0ff, 0x138f3eff, 0xfad220ff, 0xff5000ff, 0xff000eff, 0xce1124ff,
				0x272b2bff, 0xe6aaaaff, 0xffcc4eff, 0xe75a70ff, 0xfee7b8ff, 0xffdd99ff, 0xbf6952ff, 0xd79e84ff, 0xf4c7b5ff,
				0x4292e0ff, 0x1f2326ff, 0x77bcf7ff, 0x380f09ff, 0xad743dff, 0xdfa994ff, 0xd19f77ff, 0xb68a60ff, 0x8f613eff,
				0xffdb5eff, 0xee9547ff, 0x981cebff, 0x4ca0d3ff, 0xc36446ff, 0x803f29ff, 0xdf1f32ff, 0x8cc6ebff, 0x1d6398ff,
				0x4191ceff, 0xecc0acff, 0x662213ff, 0x424143ff, 0x59595cff, 0x3a87c2ff, 0xf4f7f9ff, 0xffffff66, 0xa8bcccff,
				0xce9e5dff, 0xfff35fff, 0x323a3fff, 0xe0bf94ff, 0xcb9a7aff, 0x9a6a4aff, 0x915b34ff, 0x674232ff, 0x3e2e24ff,
				0xf9ca55ff, 0xf8c954ff, 0x3b93d9ff, 0x1b6399ff, 0x9268caff, 0x7450a8ff, 0xa88dc1ff, 0x7355a2ff, 0x522e8dff,
				0xde2032ff, 0xaa8ed6ff, 0x193d59ff, 0x1e4b6eff, 0x662214ff, 0xf2760fff, 0xfff75fff, 0x8ccaf7ff, 0x553986ff,
				0xe39c2fff, 0xf2abbaff, 0xa7d28bff, 0xc6e4b5ff, 0xcbb8e9ff, 0xaebbc1ff, 0x9a4e1cff, 0xe0e7ecff, 0xf3aab9ff,
				0xe39f3dff, 0x9d0522ff, 0x854836ff, 0x47ded4ff, 0xffff87ff, 0x7d8b93ff, 0xc16a4fff, 0x98a9b4ff, 0x546170ff,
				0xcdd6ddff, 0x157569ff, 0x3fc9b9ff, 0x664500ff, 0xff7892ff, 0x65471bff, 0xe8596eff, 0xfdd54cff, 0xf5bf44ff,
				0x9b3c07ff, 0xec9dadff, 0xac5640ff, 0x5d9040ff, 0xa6d488ff, 0x452e04ff, 0xb55005ff, 0x825d0eff, 0x64aaddff,
				0x4f140bff, 0x894935ff, 0x49251bff, 0x77472bff, 0x77af57ff, 0x5d8f3fff, 0xd93047ff, 0xc02334ff, 0xdfe7ecff,
				0xffd03fff, 0xffad1fff, 0xe27e00ff, 0xffb900ff, 0xf4bd61ff, 0xe9ab61ff, 0xe4973eff, 0x8c989fff, 0xbe2032ff,
				0x9e5200ff, 0x627077ff, 0xff8a3bff, 0x7c4119ff, 0xe2ea55ff, 0xbeca28ff, 0xdb7803ff, 0x7c3225ff, 0xd67503ff,
				0xedb980ff, 0xe5a157ff, 0xedb97fff, 0x929497ff, 0xe18524ff, 0xe5922eff, 0xd17a28ff, 0xffd882ff, 0x8b5e3cff,
				0x603913ff, 0xa97c50ff, 0xad5810ff, 0x679e44ff, 0xea564bff, 0xf97253ff, 0x994500ff, 0xe2a62dff, 0xc1cdd5ff,
				0x60379aff, 0x758795ff, 0x53626cff, 0xee7c0eff, 0xc43512ff, 0x546066ff, 0x754c29ff, 0xab7e59ff, 0x89021fff,
				0xf2c994ff, 0xa47de2ff, 0xffffffb3, 0xb0f0ffff, 0xabdfffff, 0x2cb4cdff, 0xdd415dff, 0x316116ff, 0x66a644ff,
				0x184f87ff, 0x2b7bb9ff, 0xfa3c32ff, 0xdc282cff, 0xb3282cff, 0xffe933ff, 0x68e090ff, 0x17bf63ff, 0x934035ff,
				0x8a4633ff, 0xffccd6ff, 0x1213bdff, 0xd67909ff, 0xa04e3cff, 0xb3bec4ff, 0xc6d5dbff, 0xedf1f4ff, 0x8899a7ff,
			),
			wantErr: nil,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			face, err := tt.face()
			if err != nil {
				t.Fatalf("unable to load face: %v", err)
			}
			defer face.Free()

			got, gotErr := face.SelectPalette(tt.idx, tt.mutate)
			if gotErr != tt.wantErr {
				t.Errorf("Face.SelectPalette() error = %v, wantErr %v", gotErr, tt.wantErr)
			}

			if diff := diff(got, tt.want); diff != nil {
				t.Errorf("Face.SelectPalette() %v", diff)
			}
		})
	}
}

func toRGBA(palette ...uint32) []color.RGBA {
	if len(palette) == 0 {
		return nil
	}
	ret := make([]color.RGBA, len(palette))
	for i, v := range palette {
		ret[i] = color.RGBA{
			R: uint8(v & 0xff000000 >> 24),
			G: uint8(v & 0x00ff0000 >> 16),
			B: uint8(v & 0x0000ff00 >> 8),
			A: uint8(v & 0x000000ff >> 0),
		}
	}
	return ret
}

func TestFace_SetPaletteForeground(t *testing.T) {
	tests := []struct {
		name    string
		face    func() (testface, error)
		c       color.RGBA
		wantErr error
	}{
		{
			name:    "nilFace",
			face:    nilFace,
			wantErr: ErrInvalidFaceHandle,
		},
		{
			name:    "goRegular",
			face:    goRegular,
			wantErr: nil,
		},
		{
			name:    "bungeeColorWin",
			face:    bungeeColorWin,
			wantErr: nil,
		},
		{
			name:    "bungeeColorMac",
			face:    bungeeColorMac,
			wantErr: nil,
		},
		{
			name:    "twemojiMozilla",
			face:    twemojiMozilla,
			wantErr: nil,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			face, err := tt.face()
			if err != nil {
				t.Fatalf("unable to load face: %v", err)
			}
			defer face.Free()

			if err := face.SetPaletteForeground(tt.c); err != tt.wantErr {
				t.Errorf("Face.SetPaletteForeground() error = %v, want %v", err, tt.wantErr)
			}
		})
	}
}
